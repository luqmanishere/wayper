self: {
  config,
  pkgs,
  lib,
  ...
}: let
  inherit (builtins) toString;
  inherit (lib.types) int str nullOr package listOf submodule;
  inherit (lib.modules) mkIf mkMerge;
  inherit (lib.options) mkOption mkEnableOption;
  inherit (lib.meta) getExe;
  cfg = config.services.wayper;
in {
  options.services.wayper = {
    enable = mkEnableOption "Wayper, the homebrewed wallpaper daemon";
    package = mkOption {
      description = "The wayper package";
      type = package;
      default =
        self.packages.${pkgs.stdenv.hostPlatform.system}.wayper;
    };
    enableFuzzelIntegration = mkEnableOption "Use the fuzzel launcher to control the daemon. Enables the fuzzel hm option.";
    enableFishCompletions = mkEnableOption "Enables installing the fish completions";
    config = {
      default-profile = mkOption {
        description = "the default profile";
      };

      transitions = {
        enable = mkEnableOption "Globally enable transitions";
        duration = mkOption {
          description = "Global transition duration";
          type = nullOr lib.types.int;
          default = null;
        };
        fps = mkOption {
          description = mkEnableOption "Global transition fps";
          type = nullOr lib.types.int;
          default = null;
        };
      };

      monitorConfigs = mkOption {
        description = "list of monitors with their respective configuration";
        type = listOf (submodule {
          options = {
            name = mkOption {
              description = "the name of the monitor";
              type = str;
              default = "eDP-1";
            };
            profile = mkOption {
              description = "profile to apply this config";
              type = str;
              default = "default";
            };
            duration = mkOption {
              description = "the interval between wallpaper cycling (will be ignored if only one file is given)";
              type = int;
              default = 30;
            };
            path = mkOption {
              description = "path to wallpaper file(s)";
              type = str;
              default = "/home/example/wallpapers";
            };
            run_command = mkOption {
              description = "command to run when image is switched";
              type = nullOr str;
              default = null;
            };

            transitions = {
              enable = mkEnableOption "Globally enable transitions";
              duration = mkOption {
                description = "Global transition duration";
                type = nullOr lib.types.int;
                default = null;
              };
              fps = mkOption {
                description = mkEnableOption "Global transition fps";
                type = nullOr lib.types.int;
                default  = null;
              };
              type = mkOption {
                description = "Transition type";
                type =  lib.types.enum [null "Crossfade"];
                default = null;
              };
            };
          };
        });
        default = [{}];
      };
    };
  };

  config = mkMerge [
    (mkIf cfg.enable {
      home.packages = [cfg.package];

      programs.fish.interactiveShellInit = mkIf cfg.enableFishCompletions ''source (COMPLETE=fish wayperctl | psub)'';

      xdg.configFile."wayper/config.toml".text = ''
        # generated by hm wayper module
        default_profile = "${cfg.config.default-profile}"
        transitions_enabled = ${lib.boolToString cfg.config.transitions.enable}
        ${
          if (cfg.config.transitions.duration != null)
          then "transition_duration = ${toString cfg.config.transitions.duration}"
          else ""
        }
        ${
          if (cfg.config.transitions.fps != null)
          then "transition_fps = ${toString cfg.config.transitions.fps}"
          else ""
        }


        ${builtins.concatStringsSep "\n" (map (monitor: ''
            [${monitor.profile}.${monitor.name}]
            duration = ${toString monitor.duration}
            path = "${monitor.path}"
            ${
              if monitor.run_command != null
              then "run_command = \"${monitor.run_command}\""
              else ""
            }
            transitions_enabled = ${lib.boolToString monitor.transitions.enable}
            ${
              if (monitor.transitions.duration != null)
              then "transition_duration = ${toString monitor.transitions.duration}"
              else ""
            }
            ${
              if (monitor.transitions.fps != null)
              then "transition_fps = ${toString monitor.transitions.fps}"
              else ""
            }
            ${
              if (monitor.transitions.type != null)
              then "transition_type = ${toString monitor.transitions.type}"
              else ""
            }
          '')
          cfg.config.monitorConfigs)}
      '';
      systemd.user.services.wayper = {
        Unit = {
          Description = "Wayland wallpaper setter";
          After = ["graphical-session.target"];
        };

        Service = {
          # ExecStart = "${cfg.package}/bin/wayper";
          ExecStart = "${getExe cfg.package}";
          Restart = "on-failure";
          RestartSec = 3;
        };

        Install = {
          WantedBy = ["default.target"];
        };
      };
    })
    (mkIf (cfg.enable && cfg.enableFuzzelIntegration) {
      home.packages = [
        self.packages.${pkgs.stdenv.hostPlatform.system}.wayper-launcher
      ];

      programs.fuzzel.enable = true;
    })
  ];
}
